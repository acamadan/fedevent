<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>CREATA — SAM Dashboard</title>
<style>
  :root{
    --bg:#070b10;        /* page background */
    --fg:#ffffff;        /* main text */
    --muted:#9ab0c6;     /* secondary text */
    --panel:#0e141c;     /* cards */
    --edge:#1a3148;      /* borders */
    --blue:#2da8ff;      /* highlight */
    --accent:#2da8ff;
    --btnText:#001527;
    --warn:#ffbf00; --err:#ff4d4d; --ok:#1cc88a;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0;background:var(--bg);color:var(--fg);
    font-family:system-ui,"Segoe UI",Roboto,Arial,sans-serif;
  }
  header{
    padding:18px 20px;background:linear-gradient(180deg,#0b131d,#0a121c);
    border-bottom:1px solid var(--edge);
    position:sticky;top:0;z-index:5;
  }
  h1{margin:0;font-size:20px;letter-spacing:.4px;color:var(--blue)}
  main{max-width:1200px;margin:20px auto;padding:0 16px}
  .card{
    background:var(--panel);border:1px solid var(--edge);
    border-radius:14px;box-shadow:0 3px 16px #0008;padding:0;
  }
  .filters{display:flex;flex-direction:column}
  .filter-head{
    display:flex;align-items:center;justify-content:space-between;
    padding:14px 16px;border-bottom:1px solid var(--edge);cursor:pointer;
    user-select:none;
  }
  .filter-head .title{color:var(--blue);font-weight:700}
  .filter-body{display:none;padding:14px 16px;gap:12px;border-bottom:1px solid var(--edge)}
  .filter-body.grid{display:grid;grid-template-columns:repeat(4,minmax(200px,1fr));gap:12px}
  .filter-body.show{display:grid}
  label{display:flex;flex-direction:column;gap:6px;font-size:12px;color:var(--muted)}
  input,button{
    border-radius:10px;border:1px solid var(--edge);background:#0a121b;color:var(--fg);
    padding:10px 12px;outline:none;
  }
  input:focus{border-color:#2c6c9f;box-shadow:0 0 0 2px #2c6c9f33}
  button{cursor:pointer;font-weight:700}
  .primary{background:var(--accent);border:1px solid #167dd1;color:var(--btnText)}
  .ghost{background:#0a121b;border:1px dashed var(--edge);color:var(--muted)}
  .bar{display:flex;gap:10px;flex-wrap:wrap;padding:12px 16px}
  .hint{color:var(--muted);font-size:12px;padding:0 16px 12px}
  .results{display:flex;flex-direction:column;gap:12px;padding:12px 16px}
  .row{
    display:grid;grid-template-columns:1.4fr 0.9fr 0.7fr 0.7fr 0.4fr;
    gap:12px;padding:14px;border:1px solid var(--edge);
    background:#0a121b;border-radius:12px;
  }
  .title a{color:#e6f3ff;text-decoration:none}
  .title a:hover{color:#ffffff;text-decoration:underline}
  .muted{color:var(--muted)}
  .agency{color:#cfe3f7}
  .desc{color:#e2efff}
  .badge{padding:2px 10px;border-radius:999px;font-size:12px;display:inline-block}
  .due{justify-self:end}
  .b-red{background:#3b0e10;border:1px solid #801d22;color:#ffb4b8}
  .b-orange{background:#3b2a0e;border:1px solid #9a6a1a;color:#ffdb99}
  .b-yellow{background:#33310b;border:1px solid #7f7b19;color:#f7f39a}
  .b-green{background:#0f2d1d;border:1px solid #1f6b47;color:#a7eccd}
  .b-blue{background:#0f2133;border:1px solid #1c4d7e;color:#badaff}
  .status{padding:8px 16px;color:var(--muted)}
  /* typeahead dropdowns */
  .combo{position:relative}
  .dd{
    position:absolute;left:0;right:0;top:100%;z-index:10;
    background:#0a121b;border:1px solid var(--edge);border-radius:10px;
    max-height:260px;overflow:auto;box-shadow:0 8px 24px #000a;margin-top:4px;
    display:none;
  }
  .dd.show{display:block}
  .dd div{padding:8px 10px;cursor:pointer}
  .dd div:hover{background:#0f1a26}
  .pill{display:inline-flex;gap:6px;align-items:center;padding:8px 10px;border-radius:999px;background:#0a121b;border:1px solid var(--edge)}
  .pill strong{color:#fff}
  .right{margin-left:auto}
</style>
</head>
<body>
<header>
  <h1>CREATA — SAM Opportunities</h1>
</header>

<main>
  <section class="card filters">
    <!-- Headline rows (like SAM — collapsible sections) -->
    <div class="filter-head" data-target="#sec-key">
      <span class="title">Keyword & NAICS</span>
      <span class="muted">Click to expand</span>
    </div>
    <div id="sec-key" class="filter-body grid">
      <label>Keyword
        <input id="q" placeholder="e.g. lodging, conference"/>
      </label>
      <label class="combo">NAICS
        <input id="naics" placeholder="e.g. 721110" autocomplete="off"/>
        <div id="naics-dd" class="dd"></div>
      </label>
      <div class="pill"><strong>Preset:</strong> Last 60 days</div>
      <button id="demo" class="ghost right">Demo data</button>
    </div>

    <div class="filter-head" data-target="#sec-dates">
      <span class="title">Dates</span><span class="muted">Click to expand</span>
    </div>
    <div id="sec-dates" class="filter-body grid">
      <label>Posted From
        <input id="from" type="date"/>
      </label>
      <label>Posted To
        <input id="to" type="date"/>
      </label>
      <div class="hint">No due-date limiting. Adjust posted dates only. Default is last 60 days.</div>
    </div>

    <div class="filter-head" data-target="#sec-org">
      <span class="title">Organization</span><span class="muted">Click to expand</span>
    </div>
    <div id="sec-org" class="filter-body grid">
      <label class="combo">Agency / Department / Sub-tier
        <input id="org" placeholder="type e.g. defense, army, navy" autocomplete="off"/>
        <div id="org-dd" class="dd"></div>
      </label>
      <div class="hint">Type to search agencies (e.g., “defense”, “navy”, “usda”).</div>
    </div>

    <div class="bar">
      <button id="search" class="primary">Search</button>
    </div>
    <div class="hint">Tip: Start with small ranges or NAICS prefixes (e.g. <code>7211</code>) to avoid SAM rate limits while testing.</div>
    <div id="status" class="status"></div>
  </section>

  <section class="card" style="margin-top:16px">
    <div class="results" id="results"></div>
  </section>
</main>

<script>
const $ = (s,el=document)=>el.querySelector(s);
const $$= (s,el=document)=>Array.from(el.querySelectorAll(s));
const statusEl = $('#status'), resEl = $('#results');
const ddNaics = $('#naics-dd'), ddOrg = $('#org-dd');
const inNaics = $('#naics'), inOrg = $('#org'), inQ = $('#q');
const btnSearch = $('#search'), btnDemo = $('#demo');

/* collapsible */
$$('.filter-head').forEach(h=>{
  h.addEventListener('click',()=>{
    const t = h.getAttribute('data-target');
    const body = $(t);
    body.classList.toggle('show');
  });
});

/* defaults */
function setDefaultDates(){
  const now = new Date();
  const to = new Date(now);      // today
  const from = new Date(now.getTime()-60*86400000);
  $('#from').value = toISODate(from);
  $('#to').value   = toISODate(to);
}
function toISODate(d){ return d.toISOString().slice(0,10); }
function toMDY(d){ return `${String(d.getMonth()+1).padStart(2,'0')}/${String(d.getDate()).padStart(2,'0')}/${d.getFullYear()}`; }

/* typeahead helpers */
let naicsTimer, orgTimer;

inNaics.addEventListener('input', ()=>{
  clearTimeout(naicsTimer);
  const q = inNaics.value.trim();
  if (!q){ ddNaics.classList.remove('show'); return; }
  naicsTimer = setTimeout(async ()=>{
    const r = await fetch(`/api/naics?q=${encodeURIComponent(q)}`).then(x=>x.json()).catch(()=>[]);
    ddNaics.innerHTML = r.map(x=>`<div data-code="${x.code}"><strong>${x.code}</strong> — ${escapeHtml(x.title||'')}</div>`).join('') || '<div>(no matches)</div>';
    ddNaics.classList.add('show');
  }, 200);
});
ddNaics.addEventListener('click', e=>{
  const d = e.target.closest('div[data-code]');
  if (!d) return;
  inNaics.value = d.getAttribute('data-code');
  ddNaics.classList.remove('show');
});
document.addEventListener('click', e=>{
  if (!ddNaics.contains(e.target) && e.target!==inNaics) ddNaics.classList.remove('show');
  if (!ddOrg.contains(e.target) && e.target!==inOrg) ddOrg.classList.remove('show');
});

inOrg.addEventListener('input', ()=>{
  clearTimeout(orgTimer);
  const q = inOrg.value.trim();
  if (!q){ ddOrg.classList.remove('show'); return; }
  orgTimer = setTimeout(async ()=>{
    const r = await fetch(`/api/orgs?q=${encodeURIComponent(q)}`).then(x=>x.json()).catch(()=>[]);
    ddOrg.innerHTML = r.map(x=>`<div data-org="${escapeHtml(x)}">${escapeHtml(x)}</div>`).join('') || '<div>(no matches)</div>';
    ddOrg.classList.add('show');
  }, 200);
});
ddOrg.addEventListener('click', e=>{
  const d = e.target.closest('div[data-org]');
  if (!d) return;
  inOrg.value = d.getAttribute('data-org');
  ddOrg.classList.remove('show');
});

function escapeHtml(s){ return String(s).replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }

/* rendering */
function deadlineBadge(days){
  if (days<=1) return 'b-red';
  if (days<=2) return 'b-orange';
  if (days<=3) return 'b-yellow';
  if (days<=7) return 'b-green';
  return 'b-blue';
}
function daysUntil(mdy){
  if (!mdy) return null;
  const m = /^(\d{2})\/(\d{2})\/(\d{4})$/.exec(mdy);
  if (!m) return null;
  const d = new Date(`${m[3]}-${m[1]}-${m[2]}T00:00:00Z`);
  if (isNaN(d)) return null;
  return Math.ceil((d - new Date())/86400000);
}
function render(list){
  resEl.innerHTML = '';
  list.forEach(it=>{
    const du = daysUntil(it.deadline);
    const row = document.createElement('div');
    row.className='row';
    row.innerHTML = `
      <div>
        <div class="title"><a href="${it.url||'#'}" target="_blank" rel="noopener">${escapeHtml(it.title||'(no title)')}</a></div>
        <div class="muted">Solicitation: <b>${escapeHtml(it.solicitation_number||'—')}</b> • NAICS: <b>${escapeHtml(it.naics||'—')}</b></div>
        <div class="desc">${escapeHtml(String(it.description||'').slice(0,320))}</div>
      </div>
      <div class="agency">${escapeHtml(it.agency||'')}</div>
      <div class="muted">Posted: ${escapeHtml(it.posted_date||'')}</div>
      <div class="muted">Deadline: ${escapeHtml(it.deadline||'')}</div>
      <div class="due"><span class="badge ${deadlineBadge(du??99)}">${du==null?'N/A':(du+'d')}</span></div>
    `;
    resEl.appendChild(row);
  });
}

/* fetch with timeout */
async function fetchJSON(url, ms=12000){
  const ctrl = new AbortController();
  const t = setTimeout(()=>ctrl.abort(new Error('timeout')), ms);
  try{
    const r = await fetch(url, { signal: ctrl.signal });
    const txt = await r.text();
    try{ return JSON.parse(txt); }catch{ return { ok:false, error:'Bad JSON', raw:txt }; }
  }catch(e){ return { ok:false, error:String(e.message||e) }; }
  finally{ clearTimeout(t); }
}

/* run searches */
async function run(demo=false){
  statusEl.textContent = demo ? 'Loading demo…' : 'Searching…';
  btnSearch.disabled = true;
  try{
    if (demo){
      const h = await fetchJSON('/api/health');
      if (!h.ok){ statusEl.textContent='Server not healthy'; return; }
      const rows = [
        { title:'Demo — Lodging and Meeting Space', solicitation_number:'DEMO-001', naics:'721110', agency:'DoD', posted_date:'08/26/2025', deadline:'09/02/2025', description:'(Demo) Example. Replace SAM_API_KEY to enable live mode.', url:'#' },
        { title:'Demo — Hotel Rooms', solicitation_number:'DEMO-002', naics:'721110', agency:'USDA', posted_date:'08/25/2025', deadline:'08/30/2025', description:'(Demo) Example.', url:'#' },
      ];
      render(rows);
      statusEl.textContent = 'Showing demo results (no live SAM calls).';
      return;
    }

    const q = inQ.value.trim();
    const naics = inNaics.value.trim();
    const agency = inOrg.value.trim();

    const fromD = new Date($('#from').value+'T00:00:00');
    const toD   = new Date($('#to').value  +'T00:00:00');

    const params = new URLSearchParams();
    params.set('limit','10');
    params.set('postedFrom', toMDY(fromD));
    params.set('postedTo',   toMDY(toD));
    if (q) params.set('q', q);
    if (naics) params.set('naics', naics);
    if (agency) params.set('agency', agency); // server does "contains" match on agency string

    const url = '/api/sam/search?' + params.toString();
    const data = await fetchJSON(url, 12000);
    if (!data.ok){
      statusEl.innerHTML = `<span class="muted">Search failed:</span> ${escapeHtml(data.error||data.detail||'Unknown error')}`;
      resEl.innerHTML = '';
      return;
    }
    if (!Array.isArray(data.results) || data.results.length===0){
      statusEl.textContent = 'No results returned.';
      resEl.innerHTML = '';
      return;
    }
    render(data.results);
    statusEl.textContent = `Showing ${data.results.length} of ${data.total} result(s).`;
  } finally {
    btnSearch.disabled = false;
  }
}

/* wire up */
btnSearch.addEventListener('click', ()=>run(false));
btnDemo  .addEventListener('click',  ()=>run(true));
setDefaultDates();
// auto-open the first filter section so fields are visible on load
$('#sec-key').classList.add('show');
</script>
</body>
</html>
